#!/usr/bin/ruby


### This program converts LJPEG images to PNG images. ###
# https://github.com/Watanuki-Kimihiro/LJPEG-to-png 

require 'find'


def find_all_LJPEG(dir)
  files = []
  Find.find(dir) do |path|
    if File.extname(path) =~ /.LJPEG/i && File.file?(path)
      yield path
      if block_given?
        files << path
      end
    end
    files
  end
end


# Given a line from a .ics file, return a string that specifies the
# number of rows and cols in the image described by the line. The
# string would be "123 456" if the image has 123 rows and 456 cols.
def get_image_dims(line)
  rows = line[/.+LINES\s\d+/][/\d+/]
  cols = line[/.+PIXELS_PER_LINE\s\d+/][/PIXELS_PER_LINE\s\d+/][/\d+/]

  return rows + " " + cols
end


# Given an image name and a string representing the location of a
# local .ics file, get the image dimensions and digitizer name for
# image_name. Return a hash which :image_dims maps to a string of the
# image dims (which would be "123 456" if the image has 123 rows and
# 456 cols) and :digitizer maps to the digitizer name. If we can"t
# determine the dimensions and/or digitizer name, the corresponding
# entry in the hash will be nil.
def get_image_dims_and_digitizer(image_name, ics_file)
  # Get the name of the image view (e.g. "RIGHT_CC")
  image_view = image_name[image_name.rindex(".")+1..image_name.length-1]

  image_dims = nil
  digitizer = nil

  # Read the image dimensions and digitizer name from the file.
  File.open(ics_file, "r") do |file|
    file.each_line do |line|
      if !line[/#{image_view}.+/].nil?
        # Read the image dimensions
        image_dims = get_image_dims(line)
      end
      if !line[/DIGITIZER.+/].nil?
        # Read the digitizer type from the file.
        digitizer = line.split[1].downcase # Get the second word in the DIGITIZER line.

        # There are two types of Howtek scanner and they are
        # distinguished by the first letter in image_name.
        if digitizer == "howtek"
          if image_name[0..0].upcase == "A"
            digitizer += "-mgh"
          elsif image_name[0..0].upcase == "D"
            digitizer += "-ismd"
          else
            raise "Error trying to determine Howtek digitizer variant."
          end
        end
      end
    end
  end

  # Return an associative array specifying the image dimensions and
  # digitizer used.
  return {:image_dims => image_dims, :digitizer =>digitizer}
end


# Given the name of a DDSM image, return a string that describes
# the image dimensions and the name of the digitizer that was used to capture it.
def do_get_image_info(image_name)
  # Get the path to the ics file for image_name
  ics_file_name = File.dirname(image_name)+"/"+(File.basename(image_name)[0,8] + ".ics").gsub("_", "-")
  
  if !File.exists?(ics_file_name)
    puts ("ERROR: Lost "+ ics_file_name+ " !")
    exit(-1)
  end
 
  # Get the ics file; providing us with a string representing
  # the local location of the file.
  ics_file = File.open(ics_file_name, "r") 
    
  # Get the image dimensions and digitizer for image_name.
  image_dims_and_digitizer = get_image_dims_and_digitizer(File.basename(image_name), ics_file)

  return image_dims_and_digitizer
end


# Given a mammogram name and the path to the image info file, get the
# image dimensions and digitizer name string.
def get_image_info(image_name)
  # Get the image dimensions and digitizer type for the specified
  # image as a string.
  image_info = do_get_image_info(image_name)
  
  # Now output the result to standard output.
  all_ok = !image_info[:image_dims].nil? && !image_info[:digitizer].nil? # Is everything OK?
  if all_ok
    ret_val = image_info[:image_dims] + " " + image_info[:digitizer]
  end

  return ret_val
end


# Return a non-existant random filename.
def get_temp_filename
  rand_name = "#{rand(10000000)}" # A longish string
  if FileTest.exist?(rand_name)
    rand_name = get_temp_filename
  end

  return rand_name
end


# Given the path to the dir containing the jpeg program, the path to a
# LJPEG file, convert it to a PNM file. Return the path to the PNM file.
def ljpeg_to_pnm(ljpeg_file, dims_and_digitizer)
  # First convert it to raw format.
  command = "./jpeg.exe -d -s #{ljpeg_file}"
  `#{command}` # Run it.
  raw_file = ljpeg_file + '.1' # The jpeg program adds a .1 suffix.
  
  # See if the .1 file was created.
  if !FileTest.exist?(raw_file)
    raise "Could not convert from LJPEG to raw."
  end

  # Now convert the raw file to PNM and delete the raw file.
  command = "./ddsmraw2pnm.exe #{raw_file} #{dims_and_digitizer}"
  pnm_file = `#{command}`
  File.delete(raw_file)
  if $? != 0
    raise "Could not convert from raw to PNM."
  end

  # Return the path to the PNM file.
  return pnm_file.split[0]
end


# Convert a PNM file to a PNG file. pnm_file is the path to the pnm file
# and target_png_file is the name of the PNG file that we want created.
def pnm_to_png(pnm_file, target_png_file)
  command = "convert -depth 16 #{pnm_file} #{target_png_file}"
  `#{command}`

  if !FileTest.exist?(target_png_file)
    raise "Could not convert from PNM to PNG."
  end

  return target_png_file
end


# The entry point of the program.
def main 
  aFile = File.new("LJPEG_file_names.txt", "a+")
  find_all_LJPEG('.'){|path| aFile.syswrite(path+"\n")}

  File.open("LJPEG_file_names.txt","r") do |file|
    file.each_line do |line|
      image_name = line
      image_name.chomp!
      image_name = File.dirname(image_name) + "/" + File.basename(image_name, ".LJPEG")      

      # Get the image dimensions and digitizer name string for the specified image.
      image_info = get_image_info(image_name)
      
      # Get the LJPEG file path.
      ljpeg_file = image_name + ".LJPEG"
      if !File.exists?(ljpeg_file)
        puts ("ERROR: Lost "+ ljpeg_file+ " !")
        exit(-1)
      end
       
      # Convert the LJPEG file to PNM and delete the original LJPEG.
      pnm_file = ljpeg_to_pnm(ljpeg_file, image_info)
      
      # Now convert the PNM file to PNG and delete the PNG file.
      target_png_file = image_name + ".png"
      png_file = pnm_to_png(pnm_file, target_png_file)
      File.delete(pnm_file)
      
      # Test to see if we got something.
      if !FileTest.exist?(png_file)
        raise "Could not create PNG file."
        exit(-1)
      end
      File.delete(ljpeg_file)

      # Display the path to the file.
      puts File.expand_path(png_file)

    end  
  end
  
  File.delete("LJPEG_file_names.txt")
  
  exit(0)
end



# Call the entry point.
main